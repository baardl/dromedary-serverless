{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description":"Master pipeline stack that calls nested stacks",
  "Parameters":{
    "TemplateBucketName":{
      "Type":"String",
      "Description":"S3 bucket name for all the CloudFormation templates used in the pipeline.",
      "Default": "serverless-pipeline"
    },
    "HostedZoneId":{
      "Type":"AWS::Route53::HostedZone::Id",
      "Description":"The existing hosted zone id to create the test and prod hostnames in."
    },
    "TestSiteFQDN":{
      "Type":"String",
      "Description":"Unique name to use for bucket and Route53 to serve static website content for test stage.",
      "AllowedPattern":"^[a-z0-9-]+(\\.[a-z0-9-]+){2,}$",
      "ConstraintDescription":"Must be valid hostname (like www.foo.com)"
    },
    "ProdSiteFQDN":{
      "Type":"String",
      "Description":"Unique name to use for bucket and Route53 to serve static website content for production stage.",
      "AllowedPattern":"^[a-z0-9-]+(\\.[a-z0-9-]+){2,}$",
      "ConstraintDescription":"Must be valid hostname (like www.foo.com)"
    },
    "GitHubToken":{
      "NoEcho":"true",
      "Type":"String",
      "Description":"Secret. It might look something like 9b189a1654643522561f7b3ebd44a1531a4287af OAuthToken with access to Repo. Go to https://github.com/settings/tokens"
    },
    "GitHubUser":{
      "Type":"String",
      "Description":"GitHub UserName",
      "Default":"stelligent"
    },
    "GitHubRepo":{
      "Type":"String",
      "Description":"GitHub Repo to pull from. Only the Name. not the URL",
      "Default":"dromedary"
    },
    "GitHubBranch":{
      "Type":"String",
      "Description":"Branch to use from Repo. Only the Name. not the URL",
      "Default":"master"
    },
    "GulpPackageTask":{
      "Type":"String",
      "Description":"Gulp task name to package the app",
      "Default":"package"
    },
    "GulpTestTask":{
      "Type":"String",
      "Description":"Gulp task name for acceptance testing",
      "Default":"test-functional"
    },
    "DistSitePath":{
      "Type":"String",
      "Description":"Path where GulpPackageTask places the site artifact",
      "Default":"dist/site.zip"
    },
    "DistLambdaPath":{
      "Type":"String",
      "Description":"Path where GulpPackageTask places the lambda artifact",
      "Default":"dist/lambda.zip"
    },
    "DistSwaggerPath":{
      "Type":"String",
      "Description":"Path where GulpPackageTask places the lambda artifact",
      "Default":"dist/swagger.json"
    }
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "App Configuration" },
          "Parameters" : [ "HostedZoneId","TestSiteFQDN","ProdSiteFQDN" ]
        },
        {
          "Label" : { "default" : "GitHub Configuration" },
          "Parameters" : [ "GitHubToken","GitHubUser", "GitHubRepo", "GitHubBranch" ]
        },
        {
          "Label" : { "default" : "Gulp Configuration" },
          "Parameters" : [ "GulpPackageTask", "GulpTestTask", "DistSitePath", "DistLambdaPath", "DistSwaggerPath"]
        },
        {
          "Label" : { "default":"CloudFormation Configuration" },
          "Parameters" : [ "TemplateBucketName" ]
        }
      ],
      "ParameterLabels" : {
        "GitHubToken" : { "default" : "OAuth2 Token" },
        "GitHubUser" : { "default" : "User Name" },
        "GitHubRepo" : { "default" : "Repository Name" },
        "GitHubBranch" : { "default" : "Branch Name" },
        "GulpPackageTask":{ "default": "Unit Test and Package Task"},
        "GulpTestTask":{ "default": "Functional Testing Task"},
        "DistSitePath":{ "default": "Path to Site Dist"},
        "DistLambdaPath":{ "default": "Path to Lambda Dist"},
        "DistSwaggerPath":{ "default": "Path to Swagger Dist"},
        "TemplateBucketName" : { "default" : "CFN Template Bucket Name" },
        "TestSiteFQDN" : { "default" : "Test DNS Name" },
        "ProdSiteFQDN" : { "default" : "Production DNS Name" },
        "HostedZoneId" : { "default" : "Hosted Zone" }
      }
    }
  },
  "Mappings" : {
    "EndpointMap" : {
      "us-east-1": {
        "s3": "https://s3-us-east-1.amazonaws.com"
      },
      "us-west-2": {
        "s3": "https://s3-us-west-2.amazonaws.com"
      },
      "eu-west-1": {
        "s3": "https://s3-eu-west-1.amazonaws.com"
      },
      "ap-northeast-1": {
        "s3": "https://s3-ap-northeast-1.amazonaws.com"
      }
    }
  },
  "Resources":{
    "PipelineStack":{
      "Type":"AWS::CloudFormation::Stack",
      "DependsOn": [ "IAMStack" ],
      "Properties":{
        "TemplateURL": { "Fn::Join": ["/", [{ "Fn::FindInMap":[ "EndpointMap", { "Ref":"AWS::Region" }, "s3" ] }, { "Ref":"TemplateBucketName"}, "pipeline.json"]] },
        "TimeoutInMinutes":"60",
        "Parameters":{
          "LambdaBucketName":{
            "Ref": "TemplateBucketName"
          },
          "GitHubToken":{
            "Ref": "GitHubToken"
          },
          "GitHubUser":{
            "Ref": "GitHubUser"
          },
          "GitHubRepo":{
            "Ref": "GitHubRepo"
          },
          "GitHubBranch":{
            "Ref": "GitHubBranch"
          },
          "GulpPackageTask":{
            "Ref": "GulpPackageTask"
          },
          "GulpTestTask":{
            "Ref": "GulpTestTask"
          },
          "DistSitePath":{
            "Ref": "DistSitePath"
          },
          "DistLambdaPath":{
            "Ref": "DistLambdaPath"
          },
          "DistSwaggerPath":{
            "Ref": "DistSwaggerPath"
          },
          "TestBucketName":{
            "Ref": "TestSiteFQDN"
          },
          "TestEndpoint":{
            "Fn::GetAtt" : [ "TestS3Stack", "Outputs.SiteUrl" ]
          },
          "ProdBucketName":{
            "Ref": "ProdSiteFQDN"
          },
          "ProdEndpoint":{
            "Fn::GetAtt" : [ "ProdS3Stack", "Outputs.SiteUrl" ]
          },
          "ApiName":{
            "Fn::GetAtt" : [ "ApiGatewayStack", "Outputs.ApiName" ]
          },
          "TestApiUrl":{
            "Fn::GetAtt" : [ "ApiGatewayStack", "Outputs.TestApiUrl" ]
          },
          "ProdApiUrl":{
            "Fn::GetAtt" : [ "ApiGatewayStack", "Outputs.ProdApiUrl" ]
          },
          "TestAppFunctionName":{
            "Fn::GetAtt" : [ "TestAppStack", "Outputs.AppLambdaArn" ]
          },
          "ProdAppFunctionName":{
              "Fn::GetAtt" : [ "ProdAppStack", "Outputs.AppLambdaArn" ]
          },
          "CodePipelineRoleArn":{
            "Fn::GetAtt" : [ "IAMStack", "Outputs.CodePipelineRoleArn" ]
          },
          "CodePipelineLambdaRoleArn":{
            "Fn::GetAtt" : [ "IAMStack", "Outputs.CodePipelineLambdaRoleArn" ]
          }
        }
      }
    },
    "TestDynamoDBStack":{
      "Type":"AWS::CloudFormation::Stack",
      "Properties":{
        "TemplateURL": { "Fn::Join": ["/", [{ "Fn::FindInMap":[ "EndpointMap", { "Ref":"AWS::Region" }, "s3" ] }, { "Ref":"TemplateBucketName"}, "dynamodb.json"]] },
        "TimeoutInMinutes":"60"
      }
    },
    "ProdDynamoDBStack":{
      "Type":"AWS::CloudFormation::Stack",
      "Properties":{
        "TemplateURL": { "Fn::Join": ["/", [{ "Fn::FindInMap":[ "EndpointMap", { "Ref":"AWS::Region" }, "s3" ] }, { "Ref":"TemplateBucketName"}, "dynamodb.json"]] },
        "TimeoutInMinutes":"60"
      }
    },
    "ApiGatewayStack":{
      "Type":"AWS::CloudFormation::Stack",
      "Properties":{
        "TemplateURL": { "Fn::Join": ["/", [{ "Fn::FindInMap":[ "EndpointMap", { "Ref":"AWS::Region" }, "s3" ] }, { "Ref":"TemplateBucketName"}, "api-gateway.json"]] },
        "TimeoutInMinutes":"60",
        "Parameters":{
          "BucketName":{ "Ref":"TemplateBucketName" },
          "TestDDBTableName":{ "Fn::GetAtt": ["TestDynamoDBStack", "Outputs.TableName"]},
          "ProdDDBTableName":{ "Fn::GetAtt": ["ProdDynamoDBStack", "Outputs.TableName"]},
          "TestAppLambdaName":{ "Fn::GetAtt" : [ "TestAppStack", "Outputs.AppLambdaName" ] },
          "ProdAppLambdaName":{ "Fn::GetAtt" : [ "ProdAppStack", "Outputs.AppLambdaName" ] },
          "ApiIntegrationCredentialsRole":{ "Fn::GetAtt" : [ "IAMStack", "Outputs.ApiIntegrationCredentialsRole" ] }
        }
      }
    },
    "TestAppStack":{
      "Type":"AWS::CloudFormation::Stack",
      "Properties":{
        "TemplateURL": { "Fn::Join": ["/", [{ "Fn::FindInMap":[ "EndpointMap", { "Ref":"AWS::Region" }, "s3" ] }, { "Ref":"TemplateBucketName"}, "app.json"]] },
        "TimeoutInMinutes":"60",
        "Parameters":{
          "AppRole":{
            "Fn::GetAtt" : [ "IAMStack", "Outputs.AppLambdaRoleArn" ]
          }
        }
      }
    },
    "ProdAppStack":{
      "Type":"AWS::CloudFormation::Stack",
      "Properties":{
        "TemplateURL": { "Fn::Join": ["/", [{ "Fn::FindInMap":[ "EndpointMap", { "Ref":"AWS::Region" }, "s3" ] }, { "Ref":"TemplateBucketName"}, "app.json"]] },
        "TimeoutInMinutes":"60",
        "Parameters":{
          "AppRole":{
            "Fn::GetAtt" : [ "IAMStack", "Outputs.AppLambdaRoleArn" ]
          }
        }
      }
    },
    "TestS3Stack":{
      "Type":"AWS::CloudFormation::Stack",
      "Properties":{
        "TemplateURL": { "Fn::Join": ["/", [{ "Fn::FindInMap":[ "EndpointMap", { "Ref":"AWS::Region" }, "s3" ] }, { "Ref":"TemplateBucketName"}, "site.json"]] },
        "TimeoutInMinutes":"60",
        "Parameters":{
          "HostedZoneId":{ "Ref":"HostedZoneId" },
          "SiteBucketName":{ "Ref":"TestSiteFQDN" }
        }
      }
    },
    "ProdS3Stack":{
      "Type":"AWS::CloudFormation::Stack",
      "Properties":{
        "TemplateURL": { "Fn::Join": ["/", [{ "Fn::FindInMap":[ "EndpointMap", { "Ref":"AWS::Region" }, "s3" ] }, { "Ref":"TemplateBucketName"}, "site.json"]] },
        "TimeoutInMinutes":"60",
        "Parameters":{
          "HostedZoneId":{ "Ref":"HostedZoneId" },
          "SiteBucketName":{ "Ref":"ProdSiteFQDN" }
        }
      }
    },
    "IAMStack":{
      "Type":"AWS::CloudFormation::Stack",
      "Properties":{
        "TemplateURL": { "Fn::Join": ["/", [{ "Fn::FindInMap":[ "EndpointMap", { "Ref":"AWS::Region" }, "s3" ] }, { "Ref":"TemplateBucketName"}, "iam.json"]] },
        "TimeoutInMinutes":"60"
      }
    }
  },
  "Outputs":{
    "TestSiteBucket" : {
      "Value" : { "Fn::GetAtt" : [ "TestS3Stack", "Outputs.SiteBucket" ] } ,
      "Description" : "Test Site Bucket - Empty before deleting stack"
    },
    "ProdSiteBucket" : {
      "Value" : { "Fn::GetAtt" : [ "ProdS3Stack", "Outputs.SiteBucket" ] } ,
      "Description" : "Prod Site Bucket - Empty before deleting stack"
    },
    "TestSiteUrl" : {
      "Value" : { "Fn::GetAtt" : [ "TestS3Stack", "Outputs.SiteUrl" ] } ,
      "Description" : "Test Site Url"
    },
    "ProdSiteUrl" : {
      "Value" : { "Fn::GetAtt" : [ "ProdS3Stack", "Outputs.SiteUrl" ] } ,
      "Description" : "Production Site Url"
    },
    "PipelineBucket" : {
      "Value" : { "Fn::GetAtt" : [ "PipelineStack", "Outputs.ArtifactBucket" ] } ,
      "Description" : "Pipeline Artifact Bucket - Empty before deleting stack"
    },
    "PipelineUrl": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/codepipeline/home?region=",
            { "Ref": "AWS::Region" },
            "#/view/",
            { "Fn::GetAtt" : [ "PipelineStack", "Outputs.PipelineName" ] }
          ]
        ]
      },
      "Description" : "Pipeline Url"
    }
  }
}
